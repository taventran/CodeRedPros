Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"8b46e1e2-d75c-4f0b-b575-b3ae4d202673\" name=\"Changes\" comment=\"data anal\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"HighlightingSettingsPerFile\">\r\n    <setting file=\"file://$PROJECT_DIR$/backend/scraper.py\" root0=\"SKIP_HIGHLIGHTING\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2Gp7Z1N7Yppzz6Q3etvswmVw7M1\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"last_opened_file_path\": \"C:/Users/Allen Arani/PycharmProjects/CodeRedPros/backend/getData.py\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"settings.editor.selected.configurable\": \"preferences.pluginManager\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"39\" type=\"PythonConfigurationType\" factoryName=\"Python\">\r\n      <module name=\"CodeRedPros\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"C:\\Users\\Allen Arani\\PycharmProjects\\CodeRedPros\\venv\\Scripts\\python.exe\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/backend\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/backend/getData.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"true\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"PythonConfigurationType\" factoryName=\"Python\">\r\n      <module name=\"CodeRedPros\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"true\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"8b46e1e2-d75c-4f0b-b575-b3ae4d202673\" name=\"Changes\" comment=\"\" />\r\n      <created>1667073722903</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1667073722903</updated>\r\n      <workItem from=\"1667073724359\" duration=\"1666000\" />\r\n      <workItem from=\"1667075491280\" duration=\"2920000\" />\r\n      <workItem from=\"1667099876237\" duration=\"10766000\" />\r\n      <workItem from=\"1667120976628\" duration=\"5378000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"added gpu parse\">\r\n      <created>1667103359157</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667103359157</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"added gpu parse\">\r\n      <created>1667105129055</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667105129055</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"added parses\">\r\n      <created>1667105228495</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667105228495</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"added parses\">\r\n      <created>1667105276016</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667105276016</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"added parses\">\r\n      <created>1667105557145</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667105557145</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"added parses\">\r\n      <created>1667107493248</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667107493248</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"added parses\">\r\n      <created>1667126219525</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667126219525</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"added parses\">\r\n      <created>1667133316915</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667133316915</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"added parses\">\r\n      <created>1667133372893</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667133372893</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"added parses\">\r\n      <created>1667134139190</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667134139190</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"data anal\">\r\n      <created>1667135438738</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667135438738</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"data anal\">\r\n      <created>1667137360221</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667137360221</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"13\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"added gpu parse\" />\r\n    <MESSAGE value=\"added parses\" />\r\n    <MESSAGE value=\"data anal\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"data anal\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/CodeRedPros$39.coverage\" NAME=\"39 Coverage Results\" MODIFIED=\"1667135329797\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/backend\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision e073bf611060a92d88c78902f66a082741a03d62)
+++ b/.idea/workspace.xml	(date 1667137835278)
@@ -4,7 +4,13 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="8b46e1e2-d75c-4f0b-b575-b3ae4d202673" name="Changes" comment="data anal" />
+    <list default="true" id="8b46e1e2-d75c-4f0b-b575-b3ae4d202673" name="Changes" comment="data anal">
+      <change beforePath="$PROJECT_DIR$/backend/api/urls.py" beforeDir="false" afterPath="$PROJECT_DIR$/backend/api/urls.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/web/models.py" beforeDir="false" afterPath="$PROJECT_DIR$/backend/web/models.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/web/serializers.py" beforeDir="false" afterPath="$PROJECT_DIR$/backend/web/serializers.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/web/urls.py" beforeDir="false" afterPath="$PROJECT_DIR$/backend/web/urls.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/web/views.py" beforeDir="false" afterPath="$PROJECT_DIR$/backend/web/views.py" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -31,24 +37,27 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "WebServerToolWindowFactoryState": "false",
-    "last_opened_file_path": "C:/Users/Allen Arani/PycharmProjects/CodeRedPros/backend/getData.py",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "settings.editor.selected.configurable": "preferences.pluginManager"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/Allen Arani/PycharmProjects/CodeRedPros/backend/getData.py&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;
   }
-}]]></component>
+}</component>
   <component name="RunManager">
     <configuration name="39" type="PythonConfigurationType" factoryName="Python">
       <module name="CodeRedPros" />
       <option name="INTERPRETER_OPTIONS" value="" />
       <option name="PARENT_ENVS" value="true" />
+      <envs>
+        <env name="PYTHONUNBUFFERED" value="1" />
+      </envs>
       <option name="SDK_HOME" value="C:\Users\Allen Arani\PycharmProjects\CodeRedPros\venv\Scripts\python.exe" />
       <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/backend" />
       <option name="IS_MODULE_SDK" value="false" />
@@ -184,7 +193,14 @@
       <option name="project" value="LOCAL" />
       <updated>1667137360221</updated>
     </task>
-    <option name="localTasksCounter" value="13" />
+    <task id="LOCAL-00013" summary="data anal">
+      <created>1667137659173</created>
+      <option name="number" value="00013" />
+      <option name="presentableId" value="LOCAL-00013" />
+      <option name="project" value="LOCAL" />
+      <updated>1667137659173</updated>
+    </task>
+    <option name="localTasksCounter" value="14" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
Index: backend/web/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.db import models\r\nfrom numpy import maximum\r\n\r\n\r\n# Create your models here.\r\n\r\nclass UserData(models.Model):\r\n    use = models.IntegerField(default = 1, blank = False)\r\n    aesthetic = models.BooleanField(default=False)\r\n    priceRange = models.FloatField(default=10, blank=False)\r\n    size = models.IntegerField(default = 1, blank = False)\r\n\r\nclass OutputComputer(models.Model):\r\n     # Make serializer for this. \r\n     # will be finalized suggestion\r\n    total_price = models.FloatField(blank = False)\r\n\r\nclass AllData(models.Model): # All data compiled here\r\n    DEFAULT_PK = 1\r\n    num = models.IntegerField(default = DEFAULT_PK)\r\n\r\n    def __str__(self):\r\n        return \"All Data\"\r\n\r\nclass Motherboard(models.Model):\r\n    price = models.FloatField(blank = False, default=10)\r\n    name = models.CharField(blank = False, default = \"\", max_length=50)\r\n    allData = models.ForeignKey(AllData, default = AllData.DEFAULT_PK, on_delete=models.CASCADE, related_name=\"motherboard\")\r\n    size = models.CharField(blank = False, default = \"\", max_length=50)\r\n\r\n    def __str__(self):\r\n        return self.name\r\n\r\nclass CPU(models.Model):\r\n    price = models.FloatField(blank=False)\r\n    coreCount = models.FloatField(blank=True)\r\n    clockSpeed = models.FloatField(blank=True)\r\n    allData = models.ForeignKey(AllData, default = AllData.DEFAULT_PK, on_delete=models.CASCADE, related_name=\"CPU\")\r\n    name = models.TextField(blank=True, max_length=50)\r\n    \r\n    def __str__(self):\r\n        return self.name\r\n\r\nclass CPUCooler(models.Model):\r\n    price  = models.FloatField(blank=False)\r\n    allData = models.ForeignKey(AllData, default = AllData.DEFAULT_PK, on_delete=models.CASCADE, related_name=\"CPUCooler\")\r\n    name = models.TextField(blank=True, max_length=50)\r\n    \r\n    def __str__(self):\r\n        return self.name\r\n    \r\nclass Memory(models.Model):\r\n    price = models.FloatField()\r\n    allData = models.ForeignKey(AllData, default = AllData.DEFAULT_PK, on_delete=models.CASCADE, related_name=\"memory\")\r\n    name = models.TextField(blank=True, max_length=50)\r\n    gigs = models.IntegerField(blank = False, default = 0)\r\n\r\n    def __str__(self):\r\n        return self.name   \r\n    \r\nclass Storage(models.Model):\r\n    ssd = models.BooleanField(default = False)\r\n    price = models.FloatField(blank = False)\r\n    capacity = models.FloatField(blank = False, default=0)\r\n    allData = models.ForeignKey(AllData, default = AllData.DEFAULT_PK, on_delete=models.CASCADE, related_name='storage')\r\n    name = models.TextField(blank=True, max_length=50)\r\n    \r\n    def __str__(self):\r\n        return self.name   \r\n    \r\nclass GPU(models.Model):\r\n    price = models.FloatField(blank = False)\r\n    allData = models.ForeignKey(AllData, default = AllData.DEFAULT_PK, on_delete=models.CASCADE, related_name='GPU')\r\n    name = models.TextField(blank=True, max_length=50)\r\n    coreClock = models.IntegerField(blank = True, default = 0)\r\n    memory = models.IntegerField(blank=True, default = 0)\r\n    def __str__(self):\r\n        return self.name  \r\n\r\nclass Case(models.Model):\r\n    price = models.FloatField(default = 0, blank = False)\r\n    size = models.CharField(default=\"unknown\", blank=False, max_length=60)\r\n    allData = models.ForeignKey(AllData, default = AllData.DEFAULT_PK, on_delete=models.CASCADE, related_name='case')\r\n    name = models.TextField(blank= False , max_length=50)\r\n    \r\n    def __str__(self):\r\n        return self.name  \r\n\r\n\r\nclass PowerSupply(models.Model):\r\n    price = models.FloatField(blank = False)\r\n    allData = models.ForeignKey(AllData, default = AllData.DEFAULT_PK, on_delete=models.CASCADE, related_name=\"powerSupply\")\r\n    name = models.TextField(blank=True, max_length=50,)\r\n    watts = models.IntegerField(blank=False, default=0)\r\n    effiency = models.CharField(max_length=50, blank=False, default=\"\")\r\n    def __str__(self):\r\n        return self.name\r\n    \r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/web/models.py b/backend/web/models.py
--- a/backend/web/models.py	(revision e073bf611060a92d88c78902f66a082741a03d62)
+++ b/backend/web/models.py	(date 1667137752331)
@@ -1,14 +1,41 @@
 from django.db import models
-from numpy import maximum
+import pandas as pd
+import seaborn as sns
+import matplotlib.pyplot as plt
+import random
+
+def generate_graph():
+    cpu_name = ["AMD 5600X", "AMD 5800X", "Intel Core i7", "AMD 5600", "Intel Core i5", "AMD 5900X"]
+    cpu_price = [158.98, 249.00, 364.99, 139.99, 269.99, 349.99,]
+    cpu_core_clock = [3.7, 3.8, 3.6, 3.5, 3.7, 3.7]
+
+    sns.set_style("dark")
+    data_plot_cpu1 = pd.DataFrame({"Name": cpu_name, "Price": cpu_price})
+    data_plot_cpu2 = pd.DataFrame({"Name": cpu_name, "Core Clock": cpu_core_clock})
+    sns.lineplot(x="Name", y="Price", data=data_plot_cpu1)
+    sns.lineplot(x="Name", y="Core Clock", data=data_plot_cpu2)
+    line = ""
+    for i in range(10):
+        line += str(random.randint(0, 9))
+    
+    line += ".png"
+    plt.savefig(f"images/{line}")
+
+    return f"images/{line}"
 
 
 # Create your models here.
+def upload_to(instance, filename):
+    return f'images/{filename}'
+
 
 class UserData(models.Model):
     use = models.IntegerField(default = 1, blank = False)
     aesthetic = models.BooleanField(default=False)
     priceRange = models.FloatField(default=10, blank=False)
     size = models.IntegerField(default = 1, blank = False)
+    val = generate_graph()
+    image_url = models.ImageField(upload_to=upload_to, blank=True, null=True, default=val)
 
 class OutputComputer(models.Model):
      # Make serializer for this. 
Index: backend/web/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render, HttpResponse\r\nfrom rest_framework import viewsets, status\r\nfrom rest_framework.response import Response\r\nfrom rest_framework.decorators import action\r\nfrom web import serializers\r\nfrom web import models\r\nimport scraper\r\n\r\n# Create your views here.\r\n\r\nclass UserDataViewSet(viewsets.ModelViewSet):\r\n    queryset = models.UserData.objects.all()\r\n    serializer_class = serializers.UserDataSerializer\r\n    @action(detail=True, methods=[\"POST\"])\r\n    def makeUserData(self, request, pk=None):\r\n        if 'use' and 'aesthetic' and 'priceRange' and 'size' in request.data:\r\n            use = request['use']\r\n            aesthetic = request['aesthetic']\r\n            priceRange = request['priceRange']\r\n            size = request['size']\r\n            serializer = serializers.UserDataSerializer\r\n            Data = models.UserData.objects.create(use=int(use), aesthetic=int(aesthetic), \r\n            priceRange=float(priceRange), size=int(size))\r\n            response = {'message': 'New data', 'result':serializer.data}\r\n            return Response(response, status.HTTP_200_OK)\r\n        else:\r\n            response = {'message': 'Missing info'}\r\n            return Response(response, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\nclass MotherboardViewSet(viewsets.ModelViewSet):\r\n    queryset = models.Motherboard.objects.all()\r\n    serializer_class = serializers.MotherboardSerializer\r\n\r\nclass CPUViewSet(viewsets.ModelViewSet):\r\n    queryset = models.CPU.objects.all()\r\n    serializer_class = serializers.CPUSerializer\r\n\r\nclass MemoryViewSet(viewsets.ModelViewSet):\r\n    queryset = models.Memory.objects.all()\r\n    serializer_class = serializers.MemorySerializer\r\n\r\nclass CPUCoolerViewSet(viewsets.ModelViewSet):\r\n    queryset = models.CPUCooler.objects.all()\r\n    serializer_class = serializers.CPUCoolerSerializer\r\n\r\nclass StorageViewSet(viewsets.ModelViewSet):\r\n    queryset = models.Storage.objects.all()\r\n    serializer_class = serializers.StorageSerializer\r\n\r\nclass GPUViewSet(viewsets.ModelViewSet):\r\n    queryset = models.GPU.objects.all()\r\n    serializer_class = serializers.GPUSerializer\r\n\r\nclass PowerSupplyViewSet(viewsets.ModelViewSet):\r\n    queryset = models.PowerSupply.objects.all()\r\n    serializer_class = serializers.PowerSupplySerializer\r\n\r\nclass CaseViewSet(viewsets.ModelViewSet):\r\n    queryset = models.Case.objects.all()\r\n    serializer_class = serializers.CaseSerializer\r\n\r\nclass AllDataViewSet(viewsets.ModelViewSet):\r\n    queryset = models.AllData.objects.all()\r\n    serializer_class = serializers.AllDataSerializer\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/web/views.py b/backend/web/views.py
--- a/backend/web/views.py	(revision e073bf611060a92d88c78902f66a082741a03d62)
+++ b/backend/web/views.py	(date 1667137752333)
@@ -4,13 +4,14 @@
 from rest_framework.decorators import action
 from web import serializers
 from web import models
-import scraper
+from rest_framework.parsers import MultiPartParser, FormParser
 
 # Create your views here.
 
 class UserDataViewSet(viewsets.ModelViewSet):
     queryset = models.UserData.objects.all()
     serializer_class = serializers.UserDataSerializer
+    parser_classes = (MultiPartParser, FormParser)
     @action(detail=True, methods=["POST"])
     def makeUserData(self, request, pk=None):
         if 'use' and 'aesthetic' and 'priceRange' and 'size' in request.data:
@@ -20,7 +21,7 @@
             size = request['size']
             serializer = serializers.UserDataSerializer
             Data = models.UserData.objects.create(use=int(use), aesthetic=int(aesthetic), 
-            priceRange=float(priceRange), size=int(size))
+                priceRange=float(priceRange), size=int(size), image_url='images/barplot.png')
             response = {'message': 'New data', 'result':serializer.data}
             return Response(response, status.HTTP_200_OK)
         else:
Index: backend/api/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"api URL Configuration\r\n\r\nThe `urlpatterns` list routes URLs to views. For more information please see:\r\n    https://docs.djangoproject.com/en/4.1/topics/http/urls/\r\nExamples:\r\nFunction views\r\n    1. Add an import:  from my_app import views\r\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\r\nClass-based views\r\n    1. Add an import:  from other_app.views import Home\r\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\r\nIncluding another URLconf\r\n    1. Import the include() function: from django.urls import include, path\r\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\r\n\"\"\"\r\nfrom django.contrib import admin\r\nfrom django.urls import path, include\r\n\r\nurlpatterns = [\r\n    path('admin/', admin.site.urls),\r\n    path('', include('web.urls'))\r\n]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/api/urls.py b/backend/api/urls.py
--- a/backend/api/urls.py	(revision e073bf611060a92d88c78902f66a082741a03d62)
+++ b/backend/api/urls.py	(date 1667137752213)
@@ -15,8 +15,11 @@
 """
 from django.contrib import admin
 from django.urls import path, include
+from django.conf import settings
+from django.conf.urls.static import static
+
 
 urlpatterns = [
     path('admin/', admin.site.urls),
     path('', include('web.urls'))
-]
+] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
Index: backend/web/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib import admin\r\nfrom django.urls import path, include\r\nfrom web import views\r\nfrom rest_framework import routers\r\n\r\nrouter = routers.DefaultRouter()\r\nrouter.register('userdata', views.UserDataViewSet)\r\nrouter.register('motherboard', views.MotherboardViewSet)\r\nrouter.register('CPU', views.CPUViewSet)\r\nrouter.register('powersupply', views.PowerSupplyViewSet)\r\nrouter.register('AllData', views.AllDataViewSet)\r\nrouter.register('CPUCooler', views.CPUCoolerViewSet)\r\nrouter.register('memory', views.MemoryViewSet)\r\nrouter.register('storage', views.StorageViewSet)\r\nrouter.register('GPU', views.GPUViewSet)\r\nrouter.register('case', views.CaseViewSet)\r\n\r\n\r\nurlpatterns = [\r\n    path('api/', include(router.urls))\r\n]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/web/urls.py b/backend/web/urls.py
--- a/backend/web/urls.py	(revision e073bf611060a92d88c78902f66a082741a03d62)
+++ b/backend/web/urls.py	(date 1667137752332)
@@ -2,6 +2,7 @@
 from django.urls import path, include
 from web import views
 from rest_framework import routers
+from django.conf.urls.static import static
 
 router = routers.DefaultRouter()
 router.register('userdata', views.UserDataViewSet)
@@ -18,4 +19,4 @@
 
 urlpatterns = [
     path('api/', include(router.urls))
-]
+] 
Index: backend/web/serializers.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rest_framework import serializers\r\nfrom web import models\r\n\r\nclass MotherboardSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = models.Motherboard\r\n        fields = ('name', 'price', 'size')\r\n\r\nclass CPUSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = models.CPU\r\n        fields = ('name', 'price', 'coreCount', 'clockSpeed',)\r\n\r\nclass CPUCoolerSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = models.CPUCooler\r\n        fields = (\"name\", \"price\")\r\n\r\nclass MemorySerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = models.Memory\r\n        fields = (\"name\", \"price\", \"gigs\")\r\n\r\nclass StorageSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = models.Storage\r\n        fields = ('ssd', 'price', 'name', \"capacity\")\r\n\r\nclass GPUSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = models.GPU\r\n        fields = ('price', 'name', \"memory\", \"coreClock\")\r\n    \r\nclass PowerSupplySerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = models.PowerSupply\r\n        fields = ('price', 'name', \"watts\", \"effiency\")\r\n\r\nclass CaseSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = models.Case\r\n        fields = ('price', 'name', 'size')\r\n\r\nclass AllDataSerializer(serializers.ModelSerializer):\r\n    CPU = CPUSerializer(many=True, required=False)\r\n    CPUCooler = CPUCoolerSerializer(many=True, required=False)\r\n    memory = MemorySerializer(many = True, required = False)\r\n    storage = StorageSerializer(many = True, required = False)\r\n    GPU = GPUSerializer(many = True, required = False)\r\n    powerSupply = PowerSupplySerializer(many = True, required = False)\r\n    case = CaseSerializer(many = True, required = False)\r\n\r\n    class Meta:\r\n        model = models.AllData\r\n        fields = ('CPU', 'CPUCooler', 'memory', 'storage', 'GPU', 'powerSupply', 'case',)\r\n\r\nclass UserDataSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = models.UserData\r\n        fields = ('use', 'aesthetic', 'priceRange', 'size')
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/web/serializers.py b/backend/web/serializers.py
--- a/backend/web/serializers.py	(revision e073bf611060a92d88c78902f66a082741a03d62)
+++ b/backend/web/serializers.py	(date 1667137752332)
@@ -57,4 +57,4 @@
 class UserDataSerializer(serializers.ModelSerializer):
     class Meta:
         model = models.UserData
-        fields = ('use', 'aesthetic', 'priceRange', 'size')
\ No newline at end of file
+        fields = ('use', 'aesthetic', 'priceRange', 'size', 'image_url')
\ No newline at end of file
