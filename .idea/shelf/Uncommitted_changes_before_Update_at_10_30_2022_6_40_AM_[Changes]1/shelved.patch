Index: backend/scraper.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from pcpartpicker import API\r\nfrom csv import reader\r\n# from web import models\r\napi = API()\r\n\r\ncpu_data = api.retrieve(\"cpu\")\r\nmemory_data = api.retrieve(\"memory\")\r\npower_supply_data = api.retrieve(\"power-supply\")\r\ngpu_data = api.retrieve(\"video-card\")\r\ncase_data = api.retrieve(\"case\")\r\ncpu_cooler_data = api.retrieve(\"cpu-cooler\")\r\nmonitor_data = api.retrieve(\"monitor\")\r\ninternal_hard_drive_data = api.retrieve(\"internal-hard-drive\")\r\nmobo_data = api.retrieve(\"motherboard\")\r\n\r\ndef parse_powerSupply():\r\n    data = list(power_supply_data['power-supply'])\r\n    newList = []\r\n    for i in range(len(data)):\r\n        temp = str(data[i])\r\n        newList.append(temp)\r\n        #print(temp)\r\n    wattage = []\r\n    for i in range(len(newList)):\r\n        newList[i] = list(newList[i].split(','))\r\n        for x in range(len(newList[i])):\r\n            if (newList[i][x][newList[i][x].find(\"wattage=\")+8].isnumeric()):\r\n                wattage.append(newList[i][x][newList[i][x].find(\"wattage=\")+8:newList[i][x].find(\"ge=\")+11])\r\n            newList[i][x] = newList[i][x][newList[i][x].find('=') + 2:-1]\r\n\r\n    newDict = []\r\n\r\n    for i in range (len(newList)):\r\n        price = float(newList[i][7][newList[i][7].find(\" \"):-5])\r\n        if (price == 0):\r\n            continue\r\n        name = newList[i][0] + \" \" + newList[i][1]\r\n        line = {'name':name, 'watts':wattage[i], 'effiency':newList[i][3], \"price\":price}\r\n        newDict.append(line)\r\n    return newDict\r\n\r\n# def add_to_database_powerSupply():\r\n#     info = parse_powerSupply()\r\n#     for i in info:\r\n#         model = models.PowerSupply()\r\n#         model.price = i.get('price')\r\n#         model.watts = i.get('watts')\r\n#         model.effiency = i.get('effiency')\r\n#         model.name = i.get('name')\r\n#         model.save()\r\n#\r\n# add_to_database_powerSupply()\r\n\r\ndef parse_memory_data():\r\n    data = list(memory_data['memory'])\r\n    newList = []\r\n    for i in range(len(data)):\r\n        temp = str(data[i])\r\n        newList.append(temp)\r\n        #print(temp)\r\n\r\n    for i in range(len(newList)):\r\n        newList[i] = newList[i][newList[i].find('(') + 1:newList[i].rindex(')')]\r\n        newList[i] = list(newList[i].split(','))\r\n        for x in range(len(newList[i])):\r\n            newList[i][x] = newList[i][x][newList[i][x].find('=') + 2:-1]\r\n        #print(newList[i])\r\n\r\n    newDict = []\r\n    for i in range(len(newList)):\r\n        if 'on' not in newList[i] and '0.0' != newList[i][-1]:\r\n            brand = newList[i][0] + \" \" + newList[i][1]\r\n            price = float(newList[i][-1][newList[i][-1].find(':') + 2:-4])\r\n            #speed = newList[i][3][newList[i][3].find('=') + 1:]\r\n            memory = brand[brand.find('GB') - 3:brand.find('GB')].strip()\r\n            if price != 0.0 and (\"16\" == memory or \"32\" == memory or \"8\" == memory):\r\n                newDict.append({\"name\": brand, \"price\": price, \"memory\": int(memory)})\r\n\r\n    return newDict\r\n\r\ndef parse_mobo_data():\r\n    data = list(mobo_data['motherboard'])\r\n    newList = []\r\n    print(data)\r\n    for i in range(len(data)):\r\n        temp = str(data[i])\r\n        newList.append(temp)\r\n        #print(temp)\r\n\r\n    for i in range(len(newList)):\r\n        newList[i] = newList[i][newList[i].find('(') + 1:newList[i].rindex(')')]\r\n        newList[i] = list(newList[i].split(','))\r\n        for x in range(len(newList[i])):\r\n            newList[i][x] = newList[i][x][newList[i][x].find('=') + 2:-1]\r\n        #print(newList[i])\r\n\r\n    newDict = []\r\n    for i in range(len(newList)):\r\n        if \"0.0\" != newList[i][-1]:\r\n            brand = newList[i][0] + \" \" + newList[i][1]\r\n            price = float(newList[i][-1][newList[i][-1].find(':') + 2:-4])\r\n            #speed = newList[i][3][newList[i][3].find('=') + 1:]\r\n            size = newList[i][3][newList[i][3].find('=') + 1:]\r\n            if price != 0.0:\r\n                newDict.append({\"name\": brand, \"price\": price, \"size\": size})\r\n\r\n    return newDict\r\nprint(parse_mobo_data())\r\ndef parse_internal_hard_drive_data():\r\n    data = list(internal_hard_drive_data['internal-hard-drive'])\r\n    newList = []\r\n    for i in range(len(data)):\r\n        temp = str(data[i])\r\n        newList.append(temp)\r\n        #print(temp)\r\n\r\n    for i in range(len(newList)):\r\n        newList[i] = newList[i][newList[i].find('(') + 1:newList[i].rindex(')')]\r\n        newList[i] = list(newList[i].split(','))\r\n        for x in range(len(newList[i])):\r\n            newList[i][x] = newList[i][x][newList[i][x].find('=') + 2:-1]\r\n        #print(newList[i])\r\n\r\n    newDict = []\r\n    for i in range(len(newList)):\r\n            ssd = \"SSD\" in newList[i]\r\n            brand = newList[i][0] + \" \" + newList[i][1]\r\n            price = float(newList[i][-1][newList[i][-1].find(':') + 2:-4])\r\n            capacity = float(newList[i][2][newList[i][2].find('=') + 1:])\r\n            if price != 0.0:\r\n                newDict.append({\"ssd\": ssd, \"name\": brand, \"price\": price, \"capacity\": capacity})\r\n\r\n    return newDict\r\n\r\n# def add_to_database_hdd():\r\n#     data = parse_internal_hard_drive_data()\r\n#\r\n#     for i in data:\r\n#         model = models.Storage()\r\n#         model.ssd = i.get('ssd')\r\n#         model.price = i.get('price')\r\n#         model.name = i.get('name')\r\n#         model.capacity = i.get('capacity')\r\n#         model.save()\r\n\r\n\r\ndef parse_cpu():\r\n    with open('c:/code/codered2023/backend/info_csv/cpu.csv') as obj:\r\n        csv_reader = reader(obj)\r\n\r\n        info = []\r\n        \r\n        for row in csv_reader:\r\n            line = row[1].split(\",\")\r\n            line2 = []\r\n            price = float(line[8][line[8].find(\":\")+2:-6])\r\n            clock = line[3][line[3].find(\"s=\")+2:-1]\r\n            print(clock)\r\n            cpuClockSpeed = int(clock)\r\n            for i in line:\r\n                line2.append(i.split(\"=\")[1])\r\n\r\n            info.append({\"name\": line2[0][1:-1]+\" \" +line2[1][1:-1], \"cores\": int(line2[2]),\r\n             \"price\": price, \"clockSpeed\": cpuClockSpeed })\r\n\r\n    return info\r\n\r\n# def add_to_database_cpu():\r\n#     info = parse_cpu()\r\n#     for i in info:\r\n#         model = models.CPU()\r\n#         model.name = i.get(\"name\")\r\n#         model.coreCount = i.get(\"cores\")\r\n#         model.price = i.get(\"price\")\r\n#         model.clockSpeed = i.get(\"clockSpeed\")\r\n#         model.save()\r\n\r\n\r\n\r\ndef parse_gpu():\r\n    data = list(gpu_data['video-card'])\r\n    newList = []\r\n    for i in range(len(data)):\r\n        temp = str(data[i])\r\n        newList.append(temp)\r\n\r\n    for i in range(len(newList)):\r\n        newList[i] = newList[i][newList[i].find('(') + 1:newList[i].rindex(')')]\r\n        newList[i] = list(newList[i].split(','))\r\n        for x in range(len(newList[i])):\r\n            newList[i][x] = newList[i][x][newList[i][x].find('=') + 2:-1]\r\n        #print(newList[i])\r\n\r\n    newDict = []\r\n    for i in range(len(newList)):\r\n        if 'on' not in newList[i] and float(newList[i][8][newList[i][8].find(':') + 2:-4]) != 0.0:\r\n            brand = newList[i][0] + \" \" + newList[i][1] + \" \" + newList[i][2]\r\n            price = float(newList[i][8][newList[i][8].find(':') + 2:-4])\r\n            clockSpeed = float(newList[i][4][newList[i][4].find('=') + 1:])\r\n            memory = float(newList[i][3][newList[i][3].find('=') + 1:])\r\n            newDict.append({\"name\": brand, \"price\": price, \"clockSpeed\": clockSpeed, \"memory\": memory})\r\n    return newDict\r\n\r\n# def add_to_database_gpu():\r\n#     data = parse_gpu()\r\n#     for i in data:\r\n#         model = models.GPU()\r\n#         model.price = i.get('price')\r\n#         model.name = i.get('name')\r\n#         model.coreClock = i.get('clockSpeed')\r\n#         model.memory = i.get('memory')\r\n#         model.save()\r\n        \r\n\r\ndef parse_cpu_cooler():\r\n    data = list(cpu_cooler_data['cpu-cooler'])\r\n    newList = []\r\n    for i in range(len(data)):\r\n        temp = str(data[i])\r\n        newList.append(temp)\r\n        #print(temp)\r\n\r\n    for i in range(len(newList)):\r\n        newList[i] = newList[i][newList[i].find('(') + 1:newList[i].rindex(')')]\r\n        newList[i] = list(newList[i].split(','))\r\n        for x in range(len(newList[i])):\r\n            newList[i][x] = newList[i][x][newList[i][x].find('=') + 2:-1]\r\n        #print(newList[i])\r\n\r\n    newDict = []\r\n    for i in range(len(newList)):\r\n        if 'on' not in newList[i] and '0.0' != newList[i][-1]:\r\n            brand = newList[i][0] + \" \" + newList[i][1]\r\n            price = float(newList[i][-1][newList[i][-1].find(':') + 2:-4])\r\n            newDict.append({\"name\": brand, \"price\": price})\r\n\r\n    return newDict\r\n\r\n# def add_to_database_cpuCooler():\r\n#     info = parse_cpu_cooler()\r\n#     for i in info:\r\n#         if i.get('price') == 0:\r\n#             continue\r\n#         model = models.CPUCooler()\r\n#         model.name = i.get('name')\r\n#         model.price = i.get('price')\r\n#         model.save()\r\n\r\ndef parse_case_data():\r\n    data = list(case_data['case'])\r\n    newList = []\r\n    for i in range(len(data)):\r\n        temp = str(data[i])\r\n        newList.append(temp)\r\n        #print(temp)\r\n\r\n    for i in range(len(newList)):\r\n        newList[i] = newList[i][newList[i].find('(') + 1:newList[i].rindex(')')]\r\n        newList[i] = list(newList[i].split(','))\r\n        for x in range(len(newList[i])):\r\n            newList[i][x] = newList[i][x][newList[i][x].find('=') + 2:-1]\r\n        #print(newList[i])\r\n\r\n    newDict = []\r\n    for i in range(len(newList)):\r\n            brand = newList[i][0] + \" \" + newList[i][1]\r\n            price = float(newList[i][-1][newList[i][-1].find(':') + 2:-4])\r\n            form_factor = newList[i][2]\r\n            if price != 0.0:\r\n                newDict.append({\"name\": brand, \"price\": price, \"form_factor\": form_factor})\r\n\r\n    #print(newDict)\r\n    return newDict\r\n\r\n# def add_to_database_case():\r\n#     info = parse_case_data()\r\n#     for i in info:\r\n#         model = models.Case()\r\n#         model.name = i.get('name')\r\n#         model.size = i.get('form_factor')\r\n#         model.price = i.get('price')\r\n#         model.save()\r\n\r\n\r\ndef parse_memory_data():\r\n    data = list(memory_data['memory'])\r\n    newList = []\r\n    for i in range(len(data)):\r\n        temp = str(data[i])\r\n        newList.append(temp)\r\n        #print(temp)\r\n\r\n    for i in range(len(newList)):\r\n        newList[i] = newList[i][newList[i].find('(') + 1:newList[i].rindex(')')]\r\n        newList[i] = list(newList[i].split(','))\r\n        for x in range(len(newList[i])):\r\n            newList[i][x] = newList[i][x][newList[i][x].find('=') + 2:-1]\r\n        #print(newList[i])\r\n\r\n    newDict = []\r\n    for i in range(len(newList)):\r\n        if 'on' not in newList[i] and '0.0' != newList[i][-1]:\r\n            brand = newList[i][0] + \" \" + newList[i][1]\r\n            price = float(newList[i][-1][newList[i][-1].find(':') + 2:-4])\r\n            #speed = newList[i][3][newList[i][3].find('=') + 1:]\r\n            memory = brand[brand.find('GB') - 3:brand.find('GB')].strip()\r\n            if price != 0.0 and (\"16\" == memory or \"32\" == memory or \"8\" == memory):\r\n                newDict.append({\"name\": brand, \"price\": price, \"memory\": int(memory)})\r\n\r\n    return newDict\r\n\r\n# def add_to_database_memory():\r\n#     data = parse_memory_data()\r\n#     for i in data:\r\n#         model = models.Memory()\r\n#         model.price = i.get('price')\r\n#         model.gigs = i.get('memory')\r\n#         model.name = i.get('name')\r\n#         model.save()\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/scraper.py b/backend/scraper.py
--- a/backend/scraper.py	(revision c51997f38e336280dd0a4d99bf271823d11bfec4)
+++ b/backend/scraper.py	(date 1667130016709)
@@ -105,7 +105,8 @@
                 newDict.append({"name": brand, "price": price, "size": size})
 
     return newDict
-print(parse_mobo_data())
+
+
 def parse_internal_hard_drive_data():
     data = list(internal_hard_drive_data['internal-hard-drive'])
     newList = []
Index: backend/web/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib import admin\r\nfrom django.urls import path, include\r\nfrom web import views\r\nfrom rest_framework import routers\r\n\r\nrouter = routers.DefaultRouter()\r\nrouter.register('CPU', views.CPUViewSet)\r\nrouter.register('powersupply', views.PowerSupplyViewSet)\r\nrouter.register('AllData', views.AllDataViewSet)\r\nrouter.register('CPUCooler', views.CPUCoolerViewSet)\r\nrouter.register('memory', views.MemoryViewSet)\r\nrouter.register('storage', views.StorageViewSet)\r\nrouter.register('GPU', views.GPUViewSet)\r\nrouter.register('case', views.CaseViewSet)\r\n\r\n\r\nurlpatterns = [\r\n    path('api/', include(router.urls))\r\n]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/web/urls.py b/backend/web/urls.py
--- a/backend/web/urls.py	(revision c51997f38e336280dd0a4d99bf271823d11bfec4)
+++ b/backend/web/urls.py	(date 1667130016719)
@@ -4,6 +4,8 @@
 from rest_framework import routers
 
 router = routers.DefaultRouter()
+router.register('userdata', views.UserDataViewSet)
+router.register('motherboard', views.MotherboardViewSet)
 router.register('CPU', views.CPUViewSet)
 router.register('powersupply', views.PowerSupplyViewSet)
 router.register('AllData', views.AllDataViewSet)
Index: backend/web/serializers.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rest_framework import serializers\r\nfrom web import models\r\n\r\n\r\nclass CPUSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = models.CPU\r\n        fields = ('name', 'price', 'coreCount', 'clockSpeed',)\r\n\r\nclass CPUCoolerSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = models.CPUCooler\r\n        fields = (\"name\", \"price\")\r\n\r\nclass MemorySerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = models.Memory\r\n        fields = (\"name\", \"price\", \"gigs\")\r\n\r\nclass StorageSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = models.Storage\r\n        fields = ('ssd', 'price', 'name', \"capacity\")\r\n\r\nclass GPUSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = models.GPU\r\n        fields = ('price', 'name', \"memory\", \"coreClock\")\r\n    \r\nclass PowerSupplySerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = models.PowerSupply\r\n        fields = ('price', 'name', \"watts\", \"effiency\")\r\n\r\nclass CaseSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = models.Case\r\n        fields = ('price', 'name', 'size')\r\n\r\nclass AllDataSerializer(serializers.ModelSerializer):\r\n    CPU = CPUSerializer(many=True, required=False)\r\n    CPUCooler = CPUCoolerSerializer(many=True, required=False)\r\n    memory = MemorySerializer(many = True, required = False)\r\n    storage = StorageSerializer(many = True, required = False)\r\n    GPU = GPUSerializer(many = True, required = False)\r\n    powerSupply = PowerSupplySerializer(many = True, required = False)\r\n    case = CaseSerializer(many = True, required = False)\r\n\r\n    class Meta:\r\n        model = models.AllData\r\n        fields = ('CPU', 'CPUCooler', 'memory', 'storage', 'GPU', 'powerSupply', 'case',)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/web/serializers.py b/backend/web/serializers.py
--- a/backend/web/serializers.py	(revision c51997f38e336280dd0a4d99bf271823d11bfec4)
+++ b/backend/web/serializers.py	(date 1667130016718)
@@ -1,6 +1,10 @@
 from rest_framework import serializers
 from web import models
 
+class MotherboardSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = models.Motherboard
+        fields = ('name', 'price', 'size')
 
 class CPUSerializer(serializers.ModelSerializer):
     class Meta:
@@ -49,3 +53,8 @@
     class Meta:
         model = models.AllData
         fields = ('CPU', 'CPUCooler', 'memory', 'storage', 'GPU', 'powerSupply', 'case',)
+
+class UserDataSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = models.UserData
+        fields = ('use', 'aesthetic', 'priceRange', 'size')
\ No newline at end of file
